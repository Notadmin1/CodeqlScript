import java



predicate serviceClass(Class c) {
    c.getPackage().getName().matches("com.jobs.mall.crm.service%")
  }



// 1. 检测 Controller 类（类级别路径）
predicate isSpringController(Class c) {
    exists(Annotation a | 
      a = c.getAnAnnotation() and
      (
        a.getType().hasQualifiedName("org.springframework.stereotype", "Controller") or
        a.getType().hasQualifiedName("org.springframework.web.bind.annotation", "RestController")
      )
    )
  }


// 定义基础类型判断
predicate isBasicType(Type t) {
    t instanceof PrimitiveType or
    t instanceof BoxedType or
    t.hasName("String") or
    t.hasName("LocalDate") or
    t.hasName("LocalDateTime") or
    t.hasName("BigDecimal") or
    t.hasName("BigInteger") or
    t.hasName("Date") or 
    t.hasName("String[]") or
    t.hasName("List<String>")
  }

/*
// 定义查询谓词：获取方法内直接调用的方法
predicate getCallees(Method targetMethod, Method calledMethod) {
    exists(MethodCall call |
      call.getEnclosingCallable() = targetMethod and
      calledMethod = call.getCallee()
    )
  }


  predicate callsSpecificMethod(Method sourceMethod, string targetMethodName) {
    exists(MethodCall call |
      call.getEnclosingCallable() = sourceMethod and
      call.getCallee().hasName(targetMethodName)
    )
  }
*/

  predicate callsSpecificMethods(Method sourceMethod, string params) {
    exists(MethodCall call |
      call.getEnclosingCallable() = sourceMethod and
      exists(string prefix |
        prefix in ["get", "set"] and
        call.getCallee().getName().toLowerCase() = prefix.toLowerCase() + params
      )
    )
  }




    
    // 获取方法级别路径
    string getSpringMethodPath(Method m) {
      exists(Annotation a | 
        a = m.getAnAnnotation() and (
          a.getType().hasQualifiedName(
            "org.springframework.web.bind.annotation", "RequestMapping") or
          a.getType().hasQualifiedName(
            "org.springframework.web.bind.annotation", "GetMapping") or
          a.getType().hasQualifiedName(
            "org.springframework.web.bind.annotation", "PostMapping")
        ) and
        result = a.getValue("value").toString()
      )
    }

/* 
from Class c, MethodCall call1, Method m
where
m.hasName("canBindMoreUser") and
isSpringController(c) and call1.getCaller().getDeclaringType() = c and call1.getCallee().hasName(m.toString())
select
c,call1.getCallee()
*/



from Method m,MethodCall call1
where
   serviceClass(m.getDeclaringType()) and 
   not isBasicType(m.getAParameter().getType()) and 
   not exists(string param | param = m.getAParameter().getType().(RefType).getAField().toString().toLowerCase() | callsSpecificMethods(m,param) ) and
   exists(Class c| isSpringController(c) and call1.getCaller().getDeclaringType() = c) and
   call1.getCallee().hasName(m.toString())
select m,m.getAParameter(),m.getAParameter().getType().(RefType).getAField().toString(),m.getAParameter().getType(),call1.getCaller(),getSpringMethodPath(call1.getCaller())


  
/*
from Method m, MethodCall call
where 
  m.hasName("listUserByCtmId") and
  call.getEnclosingCallable() = m
select call.getCallee(), call.getLocation()
*/
